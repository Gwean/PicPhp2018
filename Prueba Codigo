<?php

interface adivinador {

    public function sugerirNumeroSecreto();

    public function elNumeroEraMenor();

    public function elNumeroEraMayor();

}



class Principiante implements Adivinador {

    protected $minitmo = 1;

    protected $maximo = 1000;

    protected $sugerencia = 0;



    public function sugerirNumeroSecreto(){

        $aleatorio = (int)rand($this->$minitmo, this->$maximo);

        $this->sugerencia = $aleatprio;

        return $this->$sugerencia;

    }



    public function elNumeroEraMayor(){

        $this->minimo = $this->sugerencia;

    }



    public function elNumeroEraMenor(){

        $this->maximo = $this->sugerencia;

    }

}

//Ejercicio 2 Se puede mejorar con busq bin

class Profesional implements Adivinador{

    
    protected $minitmo = 1;

    protected $maximo = 1000;

    protected $sugerencia = 0;


     public function sugerirNumeroSecreto(){
     $this-> sugerencia=($this->minimo + $this->maximo)/2;
     return $this-> sugerencia;}
     
     public function elNumeroEraMayor(){

        $this->minimo = $this->sugerencia;

    }



    public function elNumeroEraMenor(){

        $this->maximo = $this->sugerencia;

    }
     
        }

    //Ej 3: Get, construirlo de vuelta o hacer las variables publicas.
    
class Juego {
    public $puntos1=0;
    
    public $puntos2=0;
    
    protected $ganador = '';

    protected $ronda =0;

    public function jugar(Adivinador $jugador1, Adivinador $jugador2){

        $this->rondas = 0;

        $this->ganador = '';

        $numSecreto = rand(1, 1000);


      

        while ($this->ganador == ''){

            $num1 = $jugador1->sugerirNumeroSecreto();

            $num2 = $jugador2->sugerirNumeroSecreto();



            if ($this->hayGanador($numSecreto, $num1, $num2) == false){

                $this->informarDesvio($jugador1, $num1, $numSecreto);

                $this->informarDesvio($jugador2, $num2, $numSecreto);

            }   
           

            $this->rondas++;

        }

        

        return $this->ganador . 'El partido termino en ' . $this->rondas - "rondas.\n";

    }

//Ejercicio1
        public function informarDesvio(Adivinador $jugador, $num, $numSecreto){
        if ($num>$numsecreto){
        $jugador->elNumeroEraMayor()
        }else $jugador->elNumeroEraMenor()
        }


    protected function hayGanador($numSecreto, $num1, $num2){

        if ($num1 == $numSecreto || $num2 == $numSecreto);

            if()$num1 == $num2 {
   //Ej5  
                $this->ganador = 'Ambos jugadores empataron.';

            }

            elseif ($num1 == $numSecreto){
   //Ej5  
                $this->ganador = 'Gano el jugador 1.';

            }

            else {
   //Ej5  
                $this->ganador = 'Gano el jugador 2.';

            }

            return true; // Alguno de los jugadores acertó, devolvemos true.

    }

    return false; //Ningun jugador acertó, devolvemos false.

}

$juego = new Juego();
for(int $i=0; $i<15; $i++){


}
